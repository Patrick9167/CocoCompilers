/*----------------------------------------------------------------------
Compiler Generator Coco/R,
Copyright (c) 1990, 2004 Hanspeter Moessenboeck, University of Linz
extended by M. Loeberbauer & A. Woess, Univ. of Linz
with improvements by Pat Terry, Rhodes University

This program is free software; you can redistribute it and/or modify it 
under the terms of the GNU General Public License as published by the 
Free Software Foundation; either version 2, or (at your option) any 
later version.

This program is distributed in the hope that it will be useful, but 
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License 
for more details.

You should have received a copy of the GNU General Public License along 
with this program; if not, write to the Free Software Foundation, Inc., 
59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

As an exception, it is allowed to write an extension of Coco/R that is
used as a plugin in non-free software.

If not otherwise stated, any source code generated by Coco/R (other than 
Coco/R itself) does not fall under the GNU General Public License.
-----------------------------------------------------------------------*/

using System;

namespace Tastier {



public class Parser {
	public const int _EOF = 0;
	public const int _number = 1;
	public const int _ident = 2;
	public const int _string = 3;
	public const int maxT = 51;

	const bool T = true;
	const bool x = false;
	const int minErrDist = 2;
	
	public Scanner scanner;
	public Errors  errors;

	public Token t;    // last recognized token
	public Token la;   // lookahead token
	int errDist = minErrDist;

const int // object kinds
      var = 0, proc = 1, scope =2, constant=3, array=4;

   const int // types
      undef = 0, integer = 1, boolean = 2, estruct = 3;

   public SymbolTable tab;
   public CodeGenerator gen;

/*-------------------------------------------------------------------------------------------*/



	public Parser(Scanner scanner) {
		this.scanner = scanner;
		errors = new Errors();
	}

	void SynErr (int n) {
		if (errDist >= minErrDist) errors.SynErr(la.line, la.col, n);
		errDist = 0;
	}

	public void SemErr (string msg) {
		if (errDist >= minErrDist) errors.SemErr(t.line, t.col, msg);
		errDist = 0;
	}
	
	void Get () {
		for (;;) {
			t = la;
			la = scanner.Scan();
			if (la.kind <= maxT) { ++errDist; break; }

			la = t;
		}
	}
	
	void Expect (int n) {
		if (la.kind==n) Get(); else { SynErr(n); }
	}
	
	bool StartOf (int s) {
		return set[s, la.kind];
	}
	
	void ExpectWeak (int n, int follow) {
		if (la.kind == n) Get();
		else {
			SynErr(n);
			while (!StartOf(follow)) Get();
		}
	}


	bool WeakSeparator(int n, int syFol, int repFol) {
		int kind = la.kind;
		if (kind == n) {Get(); return true;}
		else if (StartOf(repFol)) {return false;}
		else {
			SynErr(n);
			while (!(set[syFol, kind] || set[repFol, kind] || set[0, kind])) {
				Get();
				kind = la.kind;
			}
			return StartOf(syFol);
		}
	}

	
	void AddOp(out Op op) {
		op = Op.ADD; 
		if (la.kind == 4) {
			Get();
		} else if (la.kind == 5) {
			Get();
			op = Op.SUB; 
		} else SynErr(52);
	}

	void Expr(out int reg,        // load value of Expr into register
out int type) {
		int typeR, regR; Op op; 
		SimExpr(out reg,
out type);
		if (StartOf(1)) {
			RelOp(out op);
			SimExpr(out regR,
out typeR);
			if (type == typeR) {
			  type = boolean;
			  gen.RelOp(op, reg, regR);
			}
			else SemErr("incompatible types");
			
			if (la.kind == 6) {
				CondExpr(out reg,
out type);
			}
		}
		gen.ClearRegisters(); 
	}

	void SimExpr(out int reg,     //load value of SimExpr into register
out int type) {
		int typeR, regR; Op op; 
		Term(out reg,
out type);
		while (la.kind == 4 || la.kind == 5) {
			AddOp(out op);
			Term(out regR,
out typeR);
			if (type == integer && typeR == integer)
			  gen.AddOp(op, reg, regR);
			else SemErr("integer type expected");
			
		}
	}

	void RelOp(out Op op) {
		op = Op.EQU; 
		switch (la.kind) {
		case 20: {
			Get();
			break;
		}
		case 21: {
			Get();
			op = Op.LSS; 
			break;
		}
		case 22: {
			Get();
			op = Op.GTR; 
			break;
		}
		case 23: {
			Get();
			op = Op.NEQ; 
			break;
		}
		case 24: {
			Get();
			op = Op.LEQ; 
			break;
		}
		case 25: {
			Get();
			op = Op.GEQ; 
			break;
		}
		default: SynErr(53); break;
		}
	}

	void CondExpr(out int reg,	//Conditional expression
out int type) {
		int runFirst, runSecond; 
		Expect(6);
		runFirst = gen.NewLabel();
		runSecond = gen.NewLabel();
		gen.BranchFalse(runSecond); 
		Expr(out reg,
out type);
		gen.Branch(runSecond); 
		Expect(7);
		gen.Label(runFirst); 
		Expr(out reg,
out type);
		gen.Label(runSecond);
		gen.ClearRegisters(); 
	}

	void Primary(out int reg,     // load Primary into register
out int type) {
		int n; Obj obj; string name; int regT; int regIndex;
		type = undef;
		reg = gen.GetRegister();
		Console.WriteLine(";" + reg);
		
		switch (la.kind) {
		case 2: {
			Ident(out name);
			obj = tab.Find(name); type = obj.type;
			
			if (la.kind == 30) {
				ArrIndex(out regIndex);
				if(obj.kind == array)
				{
				 regT = gen.GetRegister();
				 if (obj.level == 0)
				   gen.LoadIndexedLocal(regT,  tab.curLevel-obj.level,  obj.adr, regIndex, name);
				 else
				   gen.LoadIndexedGlobal(reg, obj.adr, regIndex, name);
				}
				
			} else if (StartOf(2)) {
				if (obj.kind == var || obj.kind == constant) {
				  if (obj.level == 0)
				     gen.LoadGlobal(reg, obj.adr, name);
				  else
				     gen.LoadLocal(reg, tab.curLevel-obj.level, obj.adr, name);
				  if (type == boolean)
				  // reset Z flag in CPSR
				     gen.ResetZ(reg);
				
				}
				else SemErr("variable expected");
				
			} else SynErr(54);
			break;
		}
		case 1: {
			Get();
			type = integer;
			n = Convert.ToInt32(t.val);
			gen.LoadConstant(reg, n);
			
			break;
		}
		case 5: {
			Get();
			Primary(out reg,
out type);
			if (type == integer)
			  gen.NegateValue(reg);
			else SemErr("integer type expected");
			
			break;
		}
		case 8: {
			Get();
			type = boolean;
			gen.LoadTrue(reg);
			
			break;
		}
		case 9: {
			Get();
			type = boolean;
			gen.LoadFalse(reg);
			
			break;
		}
		case 10: {
			Get();
			Expr(out reg,
out type);
			Expect(11);
			break;
		}
		default: SynErr(55); break;
		}
	}

	void Ident(out string name) {
		Expect(2);
		name = t.val; 
	}

	void ArrIndex(out int regIndex) {
		int reg, regT, type;
		Expect(30);
		Expr(out reg,
 out type);
		if( type == integer)
		   gen.StoreLocal(reg, 0, tab.topScope.nextAdr++, "StackTopTemp"); //PUSH ONTO STACK
		else SemErr("Invalid Index");        //Expr<> makes used registers available
		
		if (la.kind == 31) {
			Get();
			Expr(out reg,
out type);
			if(type==integer) {
			regT = gen.GetRegister();
			gen.LoadLocal(regT, 0, --tab.topScope.nextAdr, "StackTopTemp");
			gen.MulOp(Op.MUL, reg, regT);
			gen.StoreLocal(reg, 0, tab.topScope.nextAdr++, "StackTopTemp");
			}
			else SemErr("Invalid Index");
		}
		regIndex=reg;
		
		Expect(32);
	}

	void String(out string text) {
		Expect(3);
		text = t.val; 
	}

	void MulOp(out Op op) {
		op = Op.MUL; 
		if (la.kind == 12) {
			Get();
		} else if (la.kind == 13 || la.kind == 14) {
			if (la.kind == 13) {
				Get();
			} else {
				Get();
			}
			op = Op.DIV; 
		} else if (la.kind == 15 || la.kind == 16) {
			if (la.kind == 15) {
				Get();
			} else {
				Get();
			}
			op = Op.MOD; 
		} else SynErr(56);
	}

	void ProcDecl(string progName) {
		Obj obj; string procName; 
		Expect(17);
		Ident(out procName);
		obj = tab.NewObj(procName, proc, undef);
		if (procName == "main")
		  if (tab.curLevel == 0)
		     tab.mainPresent = true;
		  else SemErr("main not at lexic level 0");
		tab.OpenScope();
		
		Expect(10);
		Expect(11);
		Expect(18);
		while (la.kind == 47 || la.kind == 48 || la.kind == 50) {
			if (la.kind == 47 || la.kind == 48) {
				VarDecl();
			} else {
				StructDecl();
			}
		}
		while (la.kind == 17) {
			ProcDecl(progName);
		}
		if (procName == "main")
		  gen.Label("Main", "Body");
		else {
		  gen.ProcNameComment(procName);
		  gen.Label(procName, "Body");
		}
		
		Stat();
		while (StartOf(3)) {
			Stat();
		}
		Expect(19);
		if (procName == "main") {
		  gen.StopProgram(progName);
		  gen.Enter("Main", tab.curLevel, tab.topScope.nextAdr);
		} else {
		  gen.Return(procName);
		  gen.Enter(procName, tab.curLevel, tab.topScope.nextAdr);
		}
		tab.CloseScope();
		
	}

	void VarDecl() {
		string name; int type; int boundTotal; 
		Type(out type);
		Ident(out name);
		if (la.kind == 30) {
			Get();
			Bound(out int bound);
			boundTotal = bound; 
			if (la.kind == 31) {
				Get();
				Bound(out int boundR);
				boundTotal += boundR; 
			}
			Expect(32);
			Expect(34);
			tab.NewObj(name, array, type, boundTotal); 
		} else if (la.kind == 31 || la.kind == 34) {
			tab.NewObj(name, var, type); 
			while (la.kind == 31) {
				Get();
				Ident(out name);
				tab.NewObj(name, var, type); 
			}
			Expect(34);
		} else SynErr(57);
	}

	void StructDecl() {
		Obj obj; string name, tempName, initStruct;
		Expect(50);
		Ident(out initStruct);
		obj = tab.Find(initStruct);
		if(obj.type != estruct)
		 SemErr("Must be a struct!");
		Ident(out name);
		tab.NewObj(name, array, estruct);  //new instance
		obj = obj.next;
		while(obj.name != "EndStruct")  //create new variable declarations with ident
		{                               // "structname"."varname"
		tempName = name + "." + obj.name;
		tab.NewObj(tempName, obj.kind, obj.type, obj.length);
		obj=obj.next;
		}
		Expect(34);
	}

	void Stat() {
		int type; string name; Obj obj; int reg, regT;
		switch (la.kind) {
		case 2: {
			Ident(out name);
			obj = tab.Find(name); 
			if (la.kind == 30 || la.kind == 33) {
				if (la.kind == 30) {
					Get();
					Expr(out reg,
 out type);
					if( type == integer)
					   gen.StoreLocal(reg, 0, tab.topScope.nextAdr++, "StackTopTemp"); //PUSH ONTO STACK
					else SemErr("Invalid Index");        //Expr<> makes used registers available
					
					if (la.kind == 31) {
						Get();
						Expr(out reg,
out type);
						if(type==integer) {
						regT = gen.GetRegister();
						gen.LoadLocal(regT, 0, --tab.topScope.nextAdr, "StackTopTemp");
						gen.MulOp(Op.MUL, regT, reg);
						gen.StoreLocal(regT, 0, tab.topScope.nextAdr++, "StackTopTemp");
						}
						else SemErr("Invalid Index");
					}
					Expect(32);
				}
				Expect(33);
				if (obj.kind == constant)
				 SemErr("cannot reassign a constant");
				  if (obj.kind == proc || obj.kind == scope)
				     SemErr("cannot assign to procedure");
				
				
				Expr(out reg,
out type);
				Expect(34);
				if (type == obj.type)
				{
				  if(obj.kind==array) {
				     regT=gen.GetRegister();
				     if(obj.level==0){
				       gen.LoadLocal(regT, 0, --tab.topScope.nextAdr, "StackTopTemp");
				       gen.StoreIndexedGlobal(reg, obj.adr, regT, name);
				       }
				     else gen.StoreIndexedLocal(reg, tab.curLevel-obj.level, obj.adr, regT, name);
				  }
				  if (obj.level == 0)
				     gen.StoreGlobal(reg, obj.adr, name);
				  else gen.StoreLocal(reg, tab.curLevel-obj.level, obj.adr, name);
				  }
				else SemErr("incompatible types"); // missing line
				
			} else if (la.kind == 10) {
				Get();
				Expect(11);
				Expect(34);
				if (obj.kind == proc)
				  gen.Call(name);
				else SemErr("object is not a procedure");
				
			} else SynErr(58);
			break;
		}
		case 35: {
			Get();
			int l1, l2; l1 = 0; 
			Expr(out reg,
out type);
			if (type == boolean) {
			  l1 = gen.NewLabel();
			  gen.BranchFalse(l1);
			}
			else SemErr("boolean type expected");
			
			Stat();
			l2 = gen.NewLabel();
			gen.Branch(l2);
			gen.Label(l1);
			
			if (la.kind == 36) {
				Get();
				Stat();
			}
			gen.Label(l2); 
			break;
		}
		case 37: {
			Get();
			int exitL, anotherL, index;
			exitL = gen.NewLabel();
			anotherL = gen.NewLabel();
			Expect(10);
			ForDecl(out int regIndex,
out Op compOp,
out int regBound,
out Op incOp,
out int regIncrement);
			index = regIndex;
			Expect(11);
			Expect(18);
			gen.Label(anotherL);
			gen.RelOp(compOp, index,regBound);
			gen.BranchFalse(exitL);
			while (StartOf(3)) {
				Stat();
			}
			gen.IncrOp(incOp, index,regIncrement);
			gen.Branch(anotherL);
			gen.Label(exitL);
			Expect(19);
			break;
		}
		case 38: {
			Get();
			int breakL, nextCaseL, regR;
			nextCaseL = gen.NewLabel();
			breakL = gen.NewLabel();
			Expect(10);
			Ident(out name);
			obj = tab.Find(name);
			if(obj.kind != var)
			  SemErr("Must be a variable!");
			if(obj.type != integer)
			  SemErr("Must be an integer!");
			Expect(11);
			Expect(18);
			while (la.kind == 39) {
				Get();
				Expr(out reg,
out type);
				if(type == obj.type) {
				  regR = gen.GetRegister();
				  gen.LoadLocal(regR, (tab.curLevel-obj.level), obj.adr, obj.name);
				  gen.RelOp(Op.EQU, reg, regR);
				  gen.BranchFalse(nextCaseL);
				}
				else SemErr("Must be the same type!");
				
				Expect(7);
				while (StartOf(3)) {
					Stat();
				}
				if (la.kind == 40) {
					Get();
					gen.Branch(breakL);
				}
				gen.Label(nextCaseL);
			}
			Expect(41);
			Expect(7);
			while (StartOf(3)) {
				Stat();
			}
			if (la.kind == 40) {
				Get();
				gen.Branch(breakL);
			}
			gen.Label(breakL);
			Expect(19);
			break;
		}
		case 42: {
			Get();
			int l1, l2;
			l1 = gen.NewLabel();
			gen.Label(l1); l2=0;
			
			Expr(out reg,
out type);
			if (type == boolean) {
			  l2 = gen.NewLabel();
			  gen.BranchFalse(l2);
			}
			else SemErr("boolean type expected");
			
			Stat();
			gen.Branch(l1);
			gen.Label(l2);
			
			break;
		}
		case 43: {
			Get();
			Ident(out name);
			Expect(34);
			obj = tab.Find(name);
			if (obj.type == integer) {
			  gen.ReadInteger();
			  if (obj.level == 0)
			     gen.StoreGlobal(0, obj.adr, name);
			  else gen.StoreLocal(0, tab.curLevel-obj.level, obj.adr, name);
			}
			else SemErr("integer type expected");
			
			break;
		}
		case 44: {
			Get();
			string text; 
			if (StartOf(4)) {
				Expr(out reg,
out type);
				switch (type) {
				  case integer: gen.WriteInteger(reg, false);
				                break;
				  case boolean: gen.WriteBoolean(false);
				                break;
				}
				
			} else if (la.kind == 3) {
				String(out text);
				gen.WriteString(text); 
			} else SynErr(59);
			Expect(34);
			break;
		}
		case 45: {
			Get();
			Expr(out reg,
out type);
			switch (type) {
			  case integer: gen.WriteInteger(reg, true);
			                break;
			  case boolean: gen.WriteBoolean(true);
			                break;
			}
			
			Expect(34);
			break;
		}
		case 18: {
			Get();
			tab.OpenSubScope(); 
			while (la.kind == 47 || la.kind == 48) {
				VarDecl();
			}
			Stat();
			while (StartOf(3)) {
				Stat();
			}
			Expect(19);
			tab.CloseSubScope(); 
			break;
		}
		default: SynErr(60); break;
		}
	}

	void IncrOp(out Op op) {
		op = Op.IBO; 
		if (la.kind == 26) {
			Get();
		} else if (la.kind == 27) {
			Get();
			op = Op.DBO; 
		} else if (la.kind == 28) {
			Get();
			op = Op.IBN; 
		} else if (la.kind == 29) {
			Get();
			op = Op.DBN; 
		} else SynErr(61);
	}

	void Term(out int reg,        // load value of Term into register
out int type) {
		int typeR, regR; Op op; 
		Primary(out reg,
out type);
		while (StartOf(5)) {
			MulOp(out op);
			Primary(out regR,
out typeR);
			if (type == integer && typeR == integer)
			  gen.MulOp(op, reg, regR);
			else SemErr("integer type expected");
			
		}
	}

	void ForDecl(out int regIndex,
out Op compOp,
out int regBound,
out Op incOp,
out int regIncrement) {
		Obj obj; int index, reg, type, n; String name;
		Type(out type);
		Ident(out name);
		tab.NewObj(name, var, type);
		obj = tab.Find(name);
		if(obj.type != integer)
		 SemErr("Must be an Integer"); 
		Expect(33);
		Expect(1);
		type = integer;
		n = Convert.ToInt32(t.val);
		index = gen.GetRegister();
		gen.LoadConstant(index, n);
		if (obj.level == 0)
		  gen.StoreGlobal(index, obj.adr, name);
		else gen.StoreLocal(index, tab.curLevel-obj.level, obj.adr, name);
		
		Expect(34);
		Ident(out name);
		obj = tab.Find(name);
		if(obj.type != integer)
		 SemErr("Must be an Integer");
		regIndex = index;
		
		RelOp(out Op Rop);
		compOp = Rop;
		Expr(out reg,
out type);
		if(obj.type != integer)
		 SemErr("Must be an integer!");
		regBound = reg;
		
		Expect(34);
		Ident(out name);
		obj = tab.Find(name);
		if(obj.type != integer)
		 SemErr("Must be an Integer"); 
		IncrOp(out Op op);
		incOp=op;
		regIncrement = -1;
		if (StartOf(4)) {
			Expr(out reg,
out type);
			if(obj.type != integer)
			 SemErr("Must be an integer!");
			regIncrement = reg;
		}
	}

	void Tastier() {
		string progName; 
		Expect(46);
		Ident(out progName);
		tab.OpenScope(); 
		Expect(18);
		while (StartOf(6)) {
			if (la.kind == 47 || la.kind == 48) {
				VarDecl();
			} else if (la.kind == 49) {
				ConstDecl();
			} else {
				StructInit();
			}
		}
		while (la.kind == 17) {
			ProcDecl(progName);
		}
		tab.CloseScope(); 
		Expect(19);
	}

	void ConstDecl() {
		string name; int type; int reg; Obj obj;
		Expect(49);
		Type(out type);
		Ident(out name);
		obj = tab.NewObj(name, constant, type); 
		Expect(20);
		Expr(out reg,
out type);
		if (type == obj.type)
		        if (obj.level == 0)
		           gen.StoreGlobal(reg, obj.adr, name);
		        else SemErr("Cannot define local constants.");
		else SemErr("incompatible types"); 
		Expect(34);
	}

	void StructInit() {
		string name;
		Expect(50);
		Ident(out name);
		tab.NewObj(name, array, estruct);
		Expect(18);
		while (la.kind == 47 || la.kind == 48) {
			VarDecl();
		}
		Expect(19);
		tab.NewObj("EndStruct", undef, estruct); 
		Expect(34);
	}

	void Type(out int type) {
		type = undef; 
		if (la.kind == 47) {
			Get();
			type = integer; 
		} else if (la.kind == 48) {
			Get();
			type = boolean; 
		} else SynErr(62);
	}

	void Bound(out int bound) {
		Expect(1);
		bound = Convert.ToInt32(t.val);
		
	}



	public void Parse() {
		la = new Token();
		la.val = "";		
		Get();
		Tastier();
		Expect(0);

	}
	
	static readonly bool[,] set = {
		{T,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x},
		{x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, T,T,T,T, T,T,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x},
		{x,x,T,x, T,T,T,T, x,x,x,T, T,T,T,T, T,x,T,x, T,T,T,T, T,T,x,x, x,x,x,T, T,x,T,T, x,T,T,x, x,x,T,T, T,T,x,x, x,x,x,x, x},
		{x,x,T,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,T,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,T, x,T,T,x, x,x,T,T, T,T,x,x, x,x,x,x, x},
		{x,T,T,x, x,T,x,x, T,T,T,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x},
		{x,x,x,x, x,x,x,x, x,x,x,x, T,T,T,T, T,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x},
		{x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,T, T,T,T,x, x}

	};
} // end Parser


public class Errors {
	public int count = 0;                                    // number of errors detected
    public System.IO.TextWriter errorStream = Console.Error; // error messages go to this stream - was Console.Out DMA
    public string errMsgFormat = "-- line {0} col {1}: {2}"; // 0=line, 1=column, 2=text

	public virtual void SynErr (int line, int col, int n) {
		string s;
		switch (n) {
			case 0: s = "EOF expected"; break;
			case 1: s = "number expected"; break;
			case 2: s = "ident expected"; break;
			case 3: s = "string expected"; break;
			case 4: s = "\"+\" expected"; break;
			case 5: s = "\"-\" expected"; break;
			case 6: s = "\"?\" expected"; break;
			case 7: s = "\":\" expected"; break;
			case 8: s = "\"true\" expected"; break;
			case 9: s = "\"false\" expected"; break;
			case 10: s = "\"(\" expected"; break;
			case 11: s = "\")\" expected"; break;
			case 12: s = "\"*\" expected"; break;
			case 13: s = "\"div\" expected"; break;
			case 14: s = "\"DIV\" expected"; break;
			case 15: s = "\"mod\" expected"; break;
			case 16: s = "\"MOD\" expected"; break;
			case 17: s = "\"void\" expected"; break;
			case 18: s = "\"{\" expected"; break;
			case 19: s = "\"}\" expected"; break;
			case 20: s = "\"=\" expected"; break;
			case 21: s = "\"<\" expected"; break;
			case 22: s = "\">\" expected"; break;
			case 23: s = "\"!=\" expected"; break;
			case 24: s = "\"<=\" expected"; break;
			case 25: s = "\">=\" expected"; break;
			case 26: s = "\"++\" expected"; break;
			case 27: s = "\"--\" expected"; break;
			case 28: s = "\"+=\" expected"; break;
			case 29: s = "\"-=\" expected"; break;
			case 30: s = "\"[\" expected"; break;
			case 31: s = "\",\" expected"; break;
			case 32: s = "\"]\" expected"; break;
			case 33: s = "\":=\" expected"; break;
			case 34: s = "\";\" expected"; break;
			case 35: s = "\"if\" expected"; break;
			case 36: s = "\"else\" expected"; break;
			case 37: s = "\"for\" expected"; break;
			case 38: s = "\"switch\" expected"; break;
			case 39: s = "\"case\" expected"; break;
			case 40: s = "\"break;\" expected"; break;
			case 41: s = "\"default\" expected"; break;
			case 42: s = "\"while\" expected"; break;
			case 43: s = "\"read\" expected"; break;
			case 44: s = "\"write\" expected"; break;
			case 45: s = "\"writeln\" expected"; break;
			case 46: s = "\"program\" expected"; break;
			case 47: s = "\"int\" expected"; break;
			case 48: s = "\"bool\" expected"; break;
			case 49: s = "\"const\" expected"; break;
			case 50: s = "\"struct\" expected"; break;
			case 51: s = "??? expected"; break;
			case 52: s = "invalid AddOp"; break;
			case 53: s = "invalid RelOp"; break;
			case 54: s = "invalid Primary"; break;
			case 55: s = "invalid Primary"; break;
			case 56: s = "invalid MulOp"; break;
			case 57: s = "invalid VarDecl"; break;
			case 58: s = "invalid Stat"; break;
			case 59: s = "invalid Stat"; break;
			case 60: s = "invalid Stat"; break;
			case 61: s = "invalid IncrOp"; break;
			case 62: s = "invalid Type"; break;

			default: s = "error " + n; break;
		}
		errorStream.WriteLine(errMsgFormat, line, col, s);
		count++;
	}

	public virtual void SemErr (int line, int col, string s) {
		errorStream.WriteLine(errMsgFormat, line, col, s);
		count++;
	}
	
	public virtual void SemErr (string s) {
		errorStream.WriteLine(s);
		count++;
	}
	
	public virtual void Warning (int line, int col, string s) {
		errorStream.WriteLine(errMsgFormat, line, col, s);
	}
	
	public virtual void Warning(string s) {
		errorStream.WriteLine(s);
	}
} // Errors


public class FatalError: Exception {
	public FatalError(string m): base(m) {}
}
}