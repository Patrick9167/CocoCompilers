COMPILER Tastier

   const int // object kinds
      var = 0, proc = 1, scope =2, constant=3, array=4;

   const int // types
      undef = 0, integer = 1, boolean = 2;

   public SymbolTable tab;
   public CodeGenerator gen;

/*-------------------------------------------------------------------------------------------*/

CHARACTERS

  cr  = '\r'.
  lf  = '\n'.
  tab = '\t'.
  digit = "0123456789".
  letter = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".
  stringCh = ANY - '"' - '\\' - cr - lf - tab.
  printableCh = '\u0020' .. '\u007e'.

/*-------------------------------------------------------------------------------------------*/

TOKENS

  number = digit { digit }.
  ident = letter { letter | digit }.
  string = '"' {stringCh | '\\' printableCh} '"'.

/*-------------------------------------------------------------------------------------------*/

COMMENTS FROM "//" TO lf
COMMENTS FROM "/*" TO "*/" NESTED

/*-------------------------------------------------------------------------------------------*/

IGNORE cr + lf + tab

/*-------------------------------------------------------------------------------------------*/

PRODUCTIONS

AddOp<out Op op>
=                        (. op = Op.ADD; .)
  ( '+'
  | '-'                  (. op = Op.SUB; .)
  )
.

/*-------------------------------------------------------------------------------------------*/

Expr<out int reg,        // load value of Expr into register
     out int type>       (. int typeR, regR; Op op; .)
  = SimExpr<out reg,
            out type>
  [ RelOp<out op>
    SimExpr<out regR,
            out typeR>   (.
                            if (type == typeR) {
                               type = boolean;
                               gen.RelOp(op, reg, regR);
                            }
                            else SemErr("incompatible types");
                         .)


   [
      CondExpr<out reg,
               out type>
                          (. gen.ClearRegisters(); .)
   ]
   ]
.

/*-------------------------------------------------------------------------------------------*/
CondExpr<out int reg,	//Conditional expression
	 out int type> 	(. int runFirst, runSecond; .)
    =

    '?'
			(. runFirst = gen.NewLabel();
			   runSecond = gen.NewLabel();
			   gen.BranchFalse(runSecond); .)
     Expr<out reg,
	  out type>	(. gen.Branch(runSecond); .)
    ':'
			(. gen.Label(runFirst); .)
     Expr<out reg,
	  out type>	(. gen.Label(runSecond);
			   gen.ClearRegisters(); .)
.

/*-------------------------------------------------------------------------------------------*/

Primary<out int reg,     // load Primary into register
        out int type>    (. int n; Obj obj; string name; int regT; int regIndex;.)
=                        (.
                            type = undef;
                            reg = gen.GetRegister();
                         .)
 (Ident<out name>     	 (.
                            obj = tab.Find(name); type = obj.type;
                          .)

(
ArrIndex <out regIndex>

                          (.
                            if(obj.kind == array)
                            {
                              regT = gen.GetRegister();
                              if (obj.level == 0)
                                gen.LoadIndexedLocal(regT,  tab.curLevel-obj.level,  obj.adr, regIndex, name);
                              else
                                gen.LoadIndexedGlobal(reg, obj.adr, regIndex, name);
                            }
                          .)


|
                          (.
                            if (obj.kind == var || obj.kind == constant) {
                               if (obj.level == 0)
                                  gen.LoadGlobal(reg, obj.adr, name);
                               else
                                  gen.LoadLocal(reg, tab.curLevel-obj.level, obj.adr, name);
                               if (type == boolean)
                               // reset Z flag in CPSR
                                  gen.ResetZ(reg);

                            }
                            else SemErr("variable expected");
                         .)
)
  | number               (.
                            type = integer;
                            n = Convert.ToInt32(t.val);
                            gen.LoadConstant(reg, n);
                         .)

  | '-'
    Primary<out reg,
            out type>     (.
                            if (type == integer)
                               gen.NegateValue(reg);
                            else SemErr("integer type expected");
                         .)

  | "true"               (.
                               type = boolean;
                               gen.LoadTrue(reg);
                         .)

  | "false"              (.
                               type = boolean;
                               gen.LoadFalse(reg);
                         .)

  | '('
    Expr<out reg,
         out type>
    ')'

  )
.

/*-------------------------------------------------------------------------------------------*/

Ident<out string name>
= ident                  (. name = t.val; .)
.

/*-------------------------------------------------------------------------------------------*/

String<out string text>
= string                  (. text = t.val; .)
.

/*-------------------------------------------------------------------------------------------*/

MulOp<out Op op>
=                        (. op = Op.MUL; .)
  ( '*'
  | ("div" | "DIV")      (. op = Op.DIV; .)
  | ("mod" | "MOD")      (. op = Op.MOD; .)
  )
.

/*-------------------------------------------------------------------------------------------*/

ProcDecl<string progName>
                         (. Obj obj; string procName; .)
= "void"
  Ident<out procName>    (.
                            obj = tab.NewObj(procName, proc, undef);
                            if (procName == "main")
                               if (tab.curLevel == 0)
                                  tab.mainPresent = true;
                               else SemErr("main not at lexic level 0");
                            tab.OpenScope();
                         .)
  '(' ')'
  '{'
     {
     VarDecl
     }
     {
     ProcDecl<progName>
     }                   (.
                            if (procName == "main")
                               gen.Label("Main", "Body");
                            else {
                               gen.ProcNameComment(procName);
                               gen.Label(procName, "Body");
                            }
                         .)
     Stat { Stat }
  '}'                    (.
                            if (procName == "main") {
                               gen.StopProgram(progName);
                               gen.Enter("Main", tab.curLevel, tab.topScope.nextAdr);
                            } else {
                               gen.Return(procName);
                               gen.Enter(procName, tab.curLevel, tab.topScope.nextAdr);
                            }
                            tab.CloseScope();
                         .)
.

/*-------------------------------------------------------------------------------------------*/

RelOp<out Op op>
=                        (. op = Op.EQU; .)
  ( "="
  | '<'                  (. op = Op.LSS; .)
  | '>'                  (. op = Op.GTR; .)
  | "!="                 (. op = Op.NEQ; .)
  | "<="                 (. op = Op.LEQ; .)
  | ">="                 (. op = Op.GEQ; .)
  )
.

/*-------------------------------------------------------------------------------------------*/

SimExpr<out int reg,     //load value of SimExpr into register
        out int type>    (. int typeR, regR; Op op; .)
= Term<out reg,
       out type>
  { AddOp<out op>
    Term<out regR,
         out typeR>      (.
                            if (type == integer && typeR == integer)
                               gen.AddOp(op, reg, regR);
                            else SemErr("integer type expected");
                         .)
  }
.

/*-------------------------------------------------------------------------------------------*/

Stat                     (. int type; string name; Obj obj; int reg, regT;.)
= Ident<out name>        (. obj = tab.Find(name); .)
  (
[
  "["
       Expr<out reg,
              out type>  (.if( type == integer)
                               gen.StoreLocal(reg, 0, tab.topScope.nextAdr++, "StackTopTemp"); //PUSH ONTO STACK
                           else SemErr("Invalid Index");        //Expr<> makes used registers available
                           .)

      [
       ","
          Expr<out reg,
               out type> (.if(type==integer) {
                            regT = gen.GetRegister();
                            gen.LoadLocal(regT, 0, --tab.topScope.nextAdr, "StackTopTemp");
                            gen.AddOp(Op.ADD, regT, reg);
                            gen.StoreLocal(regT, 0, tab.topScope.nextAdr++, "StackTopTemp");
                          }
                          else SemErr("Invalid Index");.)
      ]
  "]"

]


  ":="                 (.
			                      if (obj.kind == constant)
				                       SemErr("cannot reassign a constant");
                            if (obj.kind == proc || obj.kind == scope)
                               SemErr("cannot assign to procedure");

                         .)
    Expr<out reg,
         out type> ';'   (.
                            if (type == obj.type)
                            {
                               if(obj.kind==array) {
                                  regT=gen.GetRegister();
                                  if(obj.level==0){
                                    gen.LoadLocal(regT, 0, --tab.topScope.nextAdr, "StackTopTemp");
                                    gen.StoreIndexedGlobal(reg, obj.adr, regT, name);
                                    }
                                  else gen.StoreIndexedLocal(reg, tab.curLevel-obj.level, obj.adr, regT, name);
                               }
                               if (obj.level == 0)
                                  gen.StoreGlobal(reg, obj.adr, name);
                               else gen.StoreLocal(reg, tab.curLevel-obj.level, obj.adr, name);
                               }
			                      else SemErr("incompatible types"); // missing line
                         .)
  | '(' ')' ';'          (.
                            if (obj.kind == proc)
                               gen.Call(name);
                            else SemErr("object is not a procedure");
                         .)
  )

| "if"                   (.int l1, l2; l1 = 0; .)
  Expr<out reg,
       out type>         (.
                            if (type == boolean) {
                               l1 = gen.NewLabel();
                               gen.BranchFalse(l1);
                            }
                            else SemErr("boolean type expected");
                         .)
      Stat               (.
                            l2 = gen.NewLabel();
                            gen.Branch(l2);
                            gen.Label(l1);
                         .)
      [ "else"
      Stat
      ]               	 (. gen.Label(l2); .)



| "switch"              (.int breakL, nextCaseL, regR;
                          nextCaseL = gen.NewLabel();
                          breakL = gen.NewLabel();.)

  "("
     Ident<out name>    (. obj = tab.Find(name);
                           if(obj.kind != var)
                              SemErr("Must be a variable!");
                           if(obj.type != integer)
                              SemErr("Must be an integer!");.)
  ")"

  "{"
{

  "case"
    Expr<out reg,
          out type>      (.if(type == obj.type) {
                              regR = gen.GetRegister();
                              gen.StoreLocal(regR, (tab.curLevel-obj.level), obj.adr, obj.name);
                              gen.RelOp(Op.EQU, reg, regR);
                              gen.BranchFalse(nextCaseL);
                            }
                          else SemErr("Must be the same type!");
                        .)
  ":"
  {
    Stat
  }
    [
      "break;"            (.gen.Branch(breakL);.)
    ]
                          (. gen.Label(nextCaseL);.)
}

"default"
  ":"
    {
      Stat
    }
    [
      "break;"            (.gen.Branch(breakL);.)
    ]
                          (. gen.Label(breakL);.)
 "}"



| "while"                (.
                            int l1, l2;
                            l1 = gen.NewLabel();
                            gen.Label(l1); l2=0;
                         .)
  Expr<out reg,
       out type>         (.
                            if (type == boolean) {
                               l2 = gen.NewLabel();
                               gen.BranchFalse(l2);
                            }
                            else SemErr("boolean type expected");
                         .)
   Stat                  (.
                            gen.Branch(l1);
                            gen.Label(l2);
                         .)

| "read"
  Ident<out name> ';'    (.
                            obj = tab.Find(name);
                            if (obj.type == integer) {
                               gen.ReadInteger();
                               if (obj.level == 0)
                                  gen.StoreGlobal(0, obj.adr, name);
                               else gen.StoreLocal(0, tab.curLevel-obj.level, obj.adr, name);
                            }
                            else SemErr("integer type expected");
                         .)

| "write"                (. string text; .)
  (
    Expr<out reg,
         out type>       (.
                            switch (type) {
                               case integer: gen.WriteInteger(reg, false);
                                             break;
                               case boolean: gen.WriteBoolean(false);
                                             break;
                            }
                         .)
  | String<out text>     (. gen.WriteString(text); .)
  )
  ';'

| "writeln"
  // note - for strings use write with \n in text
  Expr<out reg,
       out type>           (.
                              switch (type) {
                                 case integer: gen.WriteInteger(reg, true);
                                               break;
                                 case boolean: gen.WriteBoolean(true);
                                               break;
                              }
                           .)
  ';'

| '{'                      (. tab.OpenSubScope(); .)
  { VarDecl}
  Stat { Stat }
  '}'                      (. tab.CloseSubScope(); .)
.

/*-------------------------------------------------------------------------------------------*/

Tastier                  (. string progName; .)
  = "program"
  Ident<out progName>    (. tab.OpenScope(); .)
  '{'
    // Constants
    { VarDecl | ConstDecl} // Constants or global variables/arrays
    { ProcDecl<progName> }
                         (. tab.CloseScope(); .)
  '}'
.

/*-------------------------------------------------------------------------------------------*/

Term<out int reg,        // load value of Term into register
     out int type>       (. int typeR, regR; Op op; .)
  = Primary<out reg,
            out type>
  { MulOp<out op>
    Primary<out regR,
            out typeR>
                         (.
                            if (type == integer && typeR == integer)
                               gen.MulOp(op, reg, regR);
                            else SemErr("integer type expected");
                         .)
  }
.

/*-------------------------------------------------------------------------------------------*/

Type<out int type>
=                        (. type = undef; .)
 ( "int"                 (. type = integer; .)
 | "bool"                (. type = boolean; .)
 )
.

/*-------------------------------------------------------------------------------------------*/

VarDecl                  (. string name; int type; int boundTotal; .)
= Type<out type>
  Ident<out name>
  (
  "["


  Bound<out int bound>         (. boundTotal = bound; .)

   [
   ","
   Bound<out int boundR>        (.boundTotal += boundR; .)     //2D array means the allocated space is i+j
   ]
  "]"
  ";"
                          (. tab.NewObj(name, array, type, boundTotal); .)
  |

                          (. tab.NewObj(name, var, type); .)
  { ","
    Ident<out name>      (. tab.NewObj(name, var, type); .)
  }
   ";"
   )
.

/*-------------------------------------------------------------------------------------------*/

ConstDecl		(. string name; int type; int reg; Obj obj;.)
= "const"
  Type<out type>
  Ident<out name>       (. obj = tab.NewObj(name, constant, type); .)

  "="

  Expr<out reg,
	   out type>   (.  if (type == obj.type)
                             if (obj.level == 0)
                                gen.StoreGlobal(reg, obj.adr, name);
                             else SemErr("Cannot define local constants.");
			   else SemErr("incompatible types"); .)
  ";"

.

/*-------------------------------------------------------------------------------------------*/

Bound<out int bound>
= number
                       (.
                          bound = Convert.ToInt32(t.val);
                       .)
.
/*-------------------------------------------------------------------------------------------*/

ArrIndex<out int regIndex>  (.int reg, regT, type;.)
=
"["
     Expr<out reg,
            out type>  (.if( type == integer)
                             gen.StoreLocal(reg, 0, tab.topScope.nextAdr++, "StackTopTemp"); //PUSH ONTO STACK
                         else SemErr("Invalid Index");        //Expr<> makes used registers available
                         .)

    [
     ","
        Expr<out reg,
             out type> (.if(type==integer) {
                          regT = gen.GetRegister();
                          gen.LoadLocal(regT, 0, --tab.topScope.nextAdr, "StackTopTemp");
                          gen.AddOp(Op.ADD, reg, regT);
                          gen.StoreLocal(reg, 0, tab.topScope.nextAdr++, "StackTopTemp");
                        }
                        else SemErr("Invalid Index");.)
    ]

                      (.
                        regIndex=reg;
                       .)
"]"
.

END Tastier.
